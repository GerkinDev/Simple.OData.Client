trigger:
  batch: true
  branches:
    include:
    - master
    - develop
    - release/*
    - feature/*
    - support/*
    - hotfix/*
#    - refs/tags/*
  paths:
    exclude:
    - docs/*
    - wiki/*

variables:
  solution: 'Simple.OData.Client.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  testProjects: '**/*Tests.csproj'
  nugetFeed: '5e8114a9-7dc2-44be-acdd-0486502c1218'
  publishPackages: true
  gitTag: false

pool:
  vmImage: 'windows-latest'

steps:
# Compute the semantic version of the assemblies/image
- task: UseGitVersion@5
  displayName: 'GitVersion'
  name: Version
  inputs:
    versionSpec: '5.x'
    updateAssemblyInfo: false
    useConfigFile: true
    configFilePath: 'GitVersion.yml'

# Update the build version to our SemVer
- script: echo %Action%%BuildVersion%
  displayName: 'Set build version'
  env:
    Action: '##vso[build.updatebuildnumber]'
    BuildVersion: '$(Version.GitVersion.NugetVersionV2)-$(Build.BuildId)'

# NuGet tool installer
- task: NuGetToolInstaller@1

# Install code coverage tooling
- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    dotnet tool install -g coverlet.console
  displayName: Install code coverage tooling

# Restore packages
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'

# Set up for SonarCloud analysis
- task: SonarCloudPrepare@1
  continueOnError: true
  inputs:
    SonarCloud: 'sonar-cloud'
    organization: 'simple-odata-client'
    scannerMode: 'MSBuild'
    projectKey: 'simple-odata-client_Simple.OData.Client'
    projectName: 'Simple.OData.Client'
    projectVersion: '1.0'

# Build the project
- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    msbuildArgs: '/p:Version=$(Version.GitVersion.NugetVersionV2)'

# Run all tests
# NB Needs SDK 16.1+ for coverlet integration, seem to need --collect for NUnit as well as /CollectCoverage=true
- task: DotNetCoreCLI@2
  displayName: 'Testing'
  inputs:
    command: 'test'
    projects: '$(testProjects)'
    arguments: '--logger "trx;LogFileName=testresults.trx"'
    testRunTitle: 'Test logger'
    nobuild: true

# Run all tests gathering code coverage
- task: DotNetCoreCLI@2
  displayName: 'Testing'
  inputs:
    command: 'test'
    projects: '$(testProjects)'
    arguments: '/p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/Coverage/'
    testRunTitle: 'Unit Tests'
    nobuild: true

# Generate the report using ReportGenerator (https://github.com/danielpalme/ReportGenerator)
- script: |
   reportgenerator -reports:$(Build.SourcesDirectory)/Coverage/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/Coverage/Reports -reporttypes:HtmlInline_AzurePipelines;Cobertura
  displayName: Create Code coverage report

# Produce the packages
- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: '**/*.nuspec -SymbolPackageFormat snupkg'
    packDestination: '$(Build.ArtifactStagingDirectory)/packages'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'GitVersion.NuGetVersionV2'
    includeSymbols: true

# Copy the nuget packages to an artifacts folder
#- task: CopyFiles@2
#  displayName: 'Copy NuGet packages'
#  inputs:
#    sourceFolder: 'build'
#    contents: '**/*.*nupkg'
#    flattenFolders: true
#    targetFolder: '$(Build.ArtifactStagingDirectory)/packages'

# Publish local code coverage
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Coverage/**/*.xml
    reportDirectory: $(Build.SourcesDirectory)/Coverage/Reports

# Publish the packages artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish nuget artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/packages'
    ArtifactName: 'packages'
    publishLocation: 'Container'

# Push the packages to our nuget feed
- task: NuGetCommand@2
  displayName: 'Push packages to nuget feed'
  condition: and(succeeded(), eq('$(publishPackages)', 'true'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '$(nugetFeed)'
    allowPackageConflicts: true

# And to to NuGet org
#- task: NuGetCommand@2
#  displayName: 'Push packages to nuget feed'
#  condition: and(succeeded(), eq('$(publishPackages)', 'true'))
#  inputs:
#    command: 'push'
#    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
#    nuGetFeedType: 'public'
#    allowPackageConflicts: true

# Perform the analysis and push results to SonarCloud
- task: SonarCloudAnalyze@1
  continueOnError: true

# Tag the current branch with the version number
- script: |
    git tag $(Version.GitVersion.NugetVersionV2)
    git push origin $(Version.GitVersion.NugetVersionV2)
  workingDirectory: $(Build.SourcesDirectory)
  displayName: 'Repository tag'
  condition: and(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), eq('$(gitTag)', 'true'))